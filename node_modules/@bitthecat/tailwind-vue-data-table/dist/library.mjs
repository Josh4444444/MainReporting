import { defineComponent, ref, computed, watch, openBlock, createElementBlock, createCommentVNode, createElementVNode, Fragment, renderList, unref, normalizeClass, toDisplayString, useSlots, useAttrs, renderSlot, normalizeStyle, withDirectives, withModifiers, vModelCheckbox, createTextVNode, createBlock } from 'vue';

const _hoisted_1$1 = { class: "flex items-center justify-end mr-2 mt-2" };
const _hoisted_2$1 = {
  key: 0,
  class: "flex items-center cursor-pointer"
};
const _hoisted_3$1 = /*#__PURE__*/createElementVNode("path", {
  "stroke-linecap": "round",
  "stroke-linejoin": "round",
  d: "M18.75 19.5l-7.5-7.5 7.5-7.5m-6 15L5.25 12l7.5-7.5"
}, null, -1 /* HOISTED */);
const _hoisted_4$1 = [
  _hoisted_3$1
];
const _hoisted_5$1 = {
  key: 1,
  class: "flex items-center cursor-pointer"
};
const _hoisted_6$1 = /*#__PURE__*/createElementVNode("path", {
  "stroke-linecap": "round",
  "stroke-linejoin": "round",
  d: "M15.75 19.5L8.25 12l7.5-7.5"
}, null, -1 /* HOISTED */);
const _hoisted_7$1 = [
  _hoisted_6$1
];
const _hoisted_8$1 = { class: "sm:flex hidden" };
const _hoisted_9$1 = ["onClick"];
const _hoisted_10$1 = {
  key: 2,
  class: "flex items-center cursor-pointer"
};
const _hoisted_11$1 = /*#__PURE__*/createElementVNode("path", {
  "stroke-linecap": "round",
  "stroke-linejoin": "round",
  d: "M8.25 4.5l7.5 7.5-7.5 7.5"
}, null, -1 /* HOISTED */);
const _hoisted_12$1 = [
  _hoisted_11$1
];
const _hoisted_13$1 = {
  key: 3,
  class: "flex items-center cursor-pointer"
};
const _hoisted_14$1 = /*#__PURE__*/createElementVNode("path", {
  "stroke-linecap": "round",
  "stroke-linejoin": "round",
  d: "M11.25 4.5l7.5 7.5-7.5 7.5m-6-15l7.5 7.5-7.5 7.5"
}, null, -1 /* HOISTED */);
const _hoisted_15$1 = [
  _hoisted_14$1
];


var script$1 = {
  __name: 'TVPagination',
  props: {
    totalRows: {
        type: Number,
        default: 0
    },
    perPage: {
        type: Number,
        default: 15
    },
    currentPage: {
        type: Number,
        default: 1
    },
},
  emits: ['update:currentPage'],
  setup(__props, { emit }) {

const props = __props;


defineComponent({
    name: 'TVPaginate'
});




const totPages = ref(Math.ceil(props.totalRows/props.perPage));

const pages = computed(() => {
    if (totPages.value === 1) {
        return [props.currentPage.value]
    }

    let pages = [];

    if (totPages.value > 1 && totPages.value <= 5 ) {
        for (let i = 1; i <= totPages.value; i++) {
            pages.push(i);
        }

        return pages
    }

    if (totPages.value >= 6 ) {
        let isGtThree = props.currentPage > 1;
        const baseValue = isGtThree ? props.currentPage - 1 : props.currentPage;
        for (let i = 0; i < 5; i++) {
            if (totPages.value - props.currentPage < 4) {
                pages.push(totPages.value - (4 - i));
            } else {
                pages.push(baseValue + i);
            }
        }

        return pages
    }

    return pages
});

const paginationClass = (page) => {
    let classes = [];
    if (page === props.currentPage) {
        classes.push('rounded-xl bg-gray-400 text-white');
    }

    return classes
};

const changePage = (page = null, previous = false) => {
    let increment = 0;
    if (page === null) {
        increment = previous ? -1 : 1;
        page = props.currentPage;
    }
    emit('update:currentPage', page + increment);
};

watch(() => props.totalRows, (value) => {
    totPages.value = Math.ceil(value/props.perPage);
});


return (_ctx, _cache) => {
  return (openBlock(), createElementBlock("div", _hoisted_1$1, [
    (__props.currentPage !== 1)
      ? (openBlock(), createElementBlock("div", _hoisted_2$1, [
          (openBlock(), createElementBlock("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            viewBox: "0 0 24 24",
            "stroke-width": "1.5",
            stroke: "currentColor",
            class: "w-3 h-3",
            onClick: _cache[0] || (_cache[0] = $event => (changePage(1)))
          }, _hoisted_4$1))
        ]))
      : createCommentVNode("v-if", true),
    (__props.currentPage !== 1)
      ? (openBlock(), createElementBlock("div", _hoisted_5$1, [
          (openBlock(), createElementBlock("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            viewBox: "0 0 24 24",
            "stroke-width": "1.5",
            stroke: "currentColor",
            class: "w-3 h-3",
            onClick: _cache[1] || (_cache[1] = $event => (changePage(undefined, true)))
          }, _hoisted_7$1))
        ]))
      : createCommentVNode("v-if", true),
    createElementVNode("div", _hoisted_8$1, [
      (openBlock(true), createElementBlock(Fragment, null, renderList(unref(pages), (page) => {
        return (openBlock(), createElementBlock("p", {
          key: `page_${page}`,
          class: normalizeClass(["text-sm font-medium leading-none cursor-pointer link px-2", paginationClass(page)]),
          onClick: $event => (changePage(page))
        }, toDisplayString(page), 11 /* TEXT, CLASS, PROPS */, _hoisted_9$1))
      }), 128 /* KEYED_FRAGMENT */))
    ]),
    (__props.currentPage !== totPages.value)
      ? (openBlock(), createElementBlock("div", _hoisted_10$1, [
          (openBlock(), createElementBlock("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            viewBox: "0 0 24 24",
            "stroke-width": "1.5",
            stroke: "currentColor",
            class: "w-3 h-3",
            onClick: _cache[2] || (_cache[2] = $event => (changePage(undefined)))
          }, _hoisted_12$1))
        ]))
      : createCommentVNode("v-if", true),
    (__props.currentPage !== totPages.value)
      ? (openBlock(), createElementBlock("div", _hoisted_13$1, [
          (openBlock(), createElementBlock("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            viewBox: "0 0 24 24",
            "stroke-width": "1.5",
            stroke: "currentColor",
            class: "w-3 h-3",
            onClick: _cache[3] || (_cache[3] = $event => (changePage(totPages.value)))
          }, _hoisted_15$1))
        ]))
      : createCommentVNode("v-if", true)
  ]))
}
}

};

script$1.__file = "src/components/TVPagination.vue";

const _hoisted_1 = {
  key: 0,
  class: "flex items-center justify-end mr-2 mb-2 text-xs font-small text-body"
};
const _hoisted_2 = { class: "overflow-auto" };
const _hoisted_3 = {
  ref: "TVTABLE",
  class: "overflow-hidden min-w-full"
};
const _hoisted_4 = { class: "bg-gray-300 text-xs border divide-x divide-y" };
const _hoisted_5 = { class: "divide-x divide-y" };
const _hoisted_6 = {
  key: 0,
  class: "px-2 py-1.5",
  style: {"width":"30px"}
};
const _hoisted_7 = { class: "flex justify-between items-center" };
const _hoisted_8 = {
  key: 0,
  class: "ml-2"
};
const _hoisted_9 = ["stroke-width", "onClick"];
const _hoisted_10 = /*#__PURE__*/createElementVNode("path", {
  "stroke-linecap": "round",
  "stroke-linejoin": "round",
  d: "M4.5 15.75l7.5-7.5 7.5 7.5"
}, null, -1 /* HOISTED */);
const _hoisted_11 = [
  _hoisted_10
];
const _hoisted_12 = ["stroke-width", "onClick"];
const _hoisted_13 = /*#__PURE__*/createElementVNode("path", {
  "stroke-linecap": "round",
  "stroke-linejoin": "round",
  d: "M19.5 8.25l-7.5 7.5-7.5-7.5"
}, null, -1 /* HOISTED */);
const _hoisted_14 = [
  _hoisted_13
];
const _hoisted_15 = { class: "border" };
const _hoisted_16 = { key: 0 };
const _hoisted_17 = ["colspan"];
const _hoisted_18 = { class: "flex justify-center mb-3 mt-3" };
const _hoisted_19 = /*#__PURE__*/createElementVNode("circle", {
  class: "opacity-25",
  cx: "12",
  cy: "12",
  r: "10",
  stroke: "currentColor",
  "stroke-width": "4"
}, null, -1 /* HOISTED */);
const _hoisted_20 = /*#__PURE__*/createElementVNode("path", {
  class: "opacity-75",
  fill: "currentColor",
  d: "M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
}, null, -1 /* HOISTED */);
const _hoisted_21 = [
  _hoisted_19,
  _hoisted_20
];
const _hoisted_22 = ["id", "onClick"];
const _hoisted_23 = ["value", "onClick"];
const _hoisted_24 = ["colspan"];
const _hoisted_25 = { class: "text-xs bg-gray-300 border divide-x divide-y" };


var script = {
  __name: 'TVTable',
  props: {
    items: {
        type: [Object, Array],
        default: () => {}
    },
    fields: {
        type: Array,
        default: () => []
    },
    currentPage: {
        type: Number,
        default: 1
    },
    totalRows: {
        type: Number,
        default: 0
    },
    perPage: {
        type: Number,
        default: 15
    },
    spinnerClass: {
        type: String,
        default: ''
    },
    rowSelectClass: {
        type: String,
        default: ''
    },
    hidePagination: Boolean,
    multipleSortable: Boolean,
    enableCheck: Boolean,
    busy: Boolean,
},
  emits: [
    'update:currentPage',
    'updateSortable', 
    'changePage', 
    'checkRow', 
    'rowClicked',
],
  setup(__props, { emit }) {

const props = __props;

defineComponent({
    name: 'TVTable',
    inheritAttrs: false
});

const slots = useSlots();
useAttrs();






const localTotalRows = computed(() => {
    return props.totalRows || props.items.length || 0
});

const fromRow = ref(0);
const toRow = ref(0);
const localCurrentPage = ref(props.currentPage);

const getField = (item, field, def) => {
    return item[field] || def
};

const toggleDetails = (value) => {
    return value._showDetails = !value._showDetails
};

const sortable = ref({});
const selectedRows = ref([]);

const rowClicked = (item) => {
    if (selectedRows.value.includes(item)) {
        let index = selectedRows.value.indexOf(item);
        selectedRows.value.splice(index, 1);
    } else {
        selectedRows.value.push(item);
    }
    emit('rowClicked', item);
}; 

const updateSortable = (key, sort) => {
    props.multipleSortable 
        ? sortable.value[key] = sort
        : sortable.value = {[key] : sort};

    emit('updateSortable', sortable.value);
};

const refreshCounter = () => {
    if (localCurrentPage.value === 0) {
        return
    }
    let from = (localTotalRows.value > 0) ? 1 : 0;
    if (localCurrentPage.value > 1) {
        from = from + (localCurrentPage.value - 1) * props.perPage;
    }
    let to = Math.min(from + props.perPage - 1, localTotalRows.value);
    fromRow.value = from - 1;
    toRow.value = to;
};

const checkSelectedForRow = (item) => {
    return selectedRows.value.includes(item)
};

watch(() => localCurrentPage.value, (value) => {
    refreshCounter();
    emit('changePage', {page: value, from: fromRow.value, to: toRow.value});
    emit('update:currentPage', value);
}, {immediate: true});


return (_ctx, _cache) => {
  return (openBlock(), createElementBlock(Fragment, null, [
    (!__props.hidePagination && __props.totalRows != 0)
      ? (openBlock(), createElementBlock("div", _hoisted_1, [
          createElementVNode("span", null, "Displaying " + toDisplayString(fromRow.value + 1) + " to " + toDisplayString(toRow.value) + " of " + toDisplayString(__props.totalRows) + " items", 1 /* TEXT */)
        ]))
      : createCommentVNode("v-if", true),
    createElementVNode("div", _hoisted_2, [
      createElementVNode("table", _hoisted_3, [
        createElementVNode("thead", _hoisted_4, [
          (unref(slots)['header-row'])
            ? renderSlot(_ctx.$slots, "header-row", { key: 0 })
            : createCommentVNode("v-if", true),
          createElementVNode("tr", _hoisted_5, [
            (__props.enableCheck)
              ? (openBlock(), createElementBlock("th", _hoisted_6))
              : createCommentVNode("v-if", true),
            (openBlock(true), createElementBlock(Fragment, null, renderList(__props.fields, (field) => {
              return (openBlock(), createElementBlock("th", {
                key: field.label,
                class: normalizeClass(["px-2 py-1.5 font-medium uppercase", field.thClass]),
                style: normalizeStyle(field.thStyle)
              }, [
                createElementVNode("div", _hoisted_7, [
                  createElementVNode("span", null, toDisplayString(field.label), 1 /* TEXT */),
                  (field.sortable)
                    ? (openBlock(), createElementBlock("div", _hoisted_8, [
                        (openBlock(), createElementBlock("svg", {
                          xmlns: "http://www.w3.org/2000/svg",
                          fill: "none",
                          viewBox: "0 0 24 24",
                          "stroke-width": sortable.value[field.key] === 'asc' ? 4 : 2,
                          stroke: "currentColor",
                          class: "w-2.5 h-2.5 cursor-pointer",
                          onClick: $event => (updateSortable(field.key, 'asc'))
                        }, _hoisted_11, 8 /* PROPS */, _hoisted_9)),
                        (openBlock(), createElementBlock("svg", {
                          xmlns: "http://www.w3.org/2000/svg",
                          fill: "none",
                          viewBox: "0 0 24 24",
                          "stroke-width": sortable.value[field.key] === 'desc' ? 4 : 2,
                          stroke: "currentColor",
                          class: "w-2.5 h-2.5 cursor-pointer",
                          onClick: $event => (updateSortable(field.key, 'desc'))
                        }, _hoisted_14, 8 /* PROPS */, _hoisted_12))
                      ]))
                    : createCommentVNode("v-if", true)
                ])
              ], 6 /* CLASS, STYLE */))
            }), 128 /* KEYED_FRAGMENT */))
          ])
        ]),
        createElementVNode("tbody", _hoisted_15, [
          (__props.busy)
            ? (openBlock(), createElementBlock("tr", _hoisted_16, [
                createElementVNode("td", {
                  colspan: __props.enableCheck ? __props.fields.length + 1 : __props.fields.length
                }, [
                  createElementVNode("div", _hoisted_18, [
                    renderSlot(_ctx.$slots, "busy", {}, () => [
                      (openBlock(), createElementBlock("svg", {
                        class: normalizeClass(["animate-spin -ml-1 mr-3 h-6 w-6 text-black", __props.spinnerClass]),
                        xmlns: "http://www.w3.org/2000/svg",
                        fill: "none",
                        viewBox: "0 0 24 24"
                      }, _hoisted_21, 2 /* CLASS */))
                    ])
                  ])
                ], 8 /* PROPS */, _hoisted_17)
              ]))
            : (openBlock(true), createElementBlock(Fragment, { key: 1 }, renderList(__props.items, (item, index) => {
                return (openBlock(), createElementBlock(Fragment, {
                  key: item.id
                }, [
                  createElementVNode("tr", {
                    id: `TVTABLE_row_${index}_${item.id}`,
                    class: normalizeClass(["divide-x divide-y last:border-b-0 px-2 py-1.5 text-left border hover:bg-gray-400/50", `${index % 2 ? 'bg-gray-300/50' : 'bg-gray-100/50'}`]),
                    onClick: $event => (rowClicked(item))
                  }, [
                    (__props.enableCheck)
                      ? (openBlock(), createElementBlock("td", {
                          key: `check_${item.label}`,
                          class: normalizeClass(`px-2 py-1.5 align-top table-cell last:border-b-0 ${checkSelectedForRow(item) ? __props.rowSelectClass || 'bg-gray-400/50' : ''}`)
                        }, [
                          withDirectives(createElementVNode("input", {
                            id: "checkbox",
                            "onUpdate:modelValue": _cache[0] || (_cache[0] = $event => ((selectedRows).value = $event)),
                            value: item,
                            type: "checkbox",
                            onClick: withModifiers($event => (emit('checkRow', item)), ["stop"])
                          }, null, 8 /* PROPS */, _hoisted_23), [
                            [vModelCheckbox, selectedRows.value]
                          ])
                        ], 2 /* CLASS */))
                      : createCommentVNode("v-if", true),
                    (openBlock(true), createElementBlock(Fragment, null, renderList(__props.fields, (field) => {
                      return (openBlock(), createElementBlock("td", {
                        key: field.key,
                        class: normalizeClass(["px-2 py-1.5 align-top table-cell last:border-b-0", `${field.tdClass ?? ''} ${checkSelectedForRow(item) ? __props.rowSelectClass || 'bg-gray-400/50' : ''}`]),
                        style: normalizeStyle(field.tdStyle)
                      }, [
                        renderSlot(_ctx.$slots, `cell:${field.key || field.label}`, {
                          item: item,
                          data: getField(item, field.key),
                          toggleDetails: toggleDetails
                        }, () => [
                          createTextVNode(toDisplayString(getField(item, field.key, '')), 1 /* TEXT */)
                        ])
                      ], 6 /* CLASS, STYLE */))
                    }), 128 /* KEYED_FRAGMENT */))
                  ], 10 /* CLASS, PROPS */, _hoisted_22),
                  (item._showDetails)
                    ? (openBlock(), createElementBlock("tr", {
                        key: 0,
                        class: normalizeClass(index % 2 ? 'bg-gray-300/50' : 'bg-gray-100/50')
                      }, [
                        createElementVNode("td", {
                          colspan: __props.enableCheck ? __props.fields.length + 1 : __props.fields.length
                        }, [
                          renderSlot(_ctx.$slots, "row-details", { item: item })
                        ], 8 /* PROPS */, _hoisted_24)
                      ], 2 /* CLASS */))
                    : createCommentVNode("v-if", true)
                ], 64 /* STABLE_FRAGMENT */))
              }), 128 /* KEYED_FRAGMENT */))
        ]),
        createElementVNode("tfoot", _hoisted_25, [
          (unref(slots)['footer-row'])
            ? renderSlot(_ctx.$slots, "footer-row", { key: 0 })
            : createCommentVNode("v-if", true)
        ])
      ], 512 /* NEED_PATCH */)
    ]),
    (unref(localTotalRows) > __props.perPage && !__props.hidePagination)
      ? (openBlock(), createBlock(script$1, {
          key: 1,
          currentPage: localCurrentPage.value,
          "onUpdate:currentPage": _cache[1] || (_cache[1] = $event => ((localCurrentPage).value = $event)),
          "total-rows": unref(localTotalRows),
          "per-page": __props.perPage
        }, null, 8 /* PROPS */, ["currentPage", "total-rows", "per-page"]))
      : createCommentVNode("v-if", true)
  ], 64 /* STABLE_FRAGMENT */))
}
}

};

script.__file = "src/components/TVTable.vue";

export { script$1 as TVPagination, script as TVTable };
